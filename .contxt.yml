config:
  autorun:
    onenter: setNeeds
    onleave: setDefaults
  sequencially: true
  variables:
    software : ""
    version: ""

task:
  - id: setNeeds
    variables:
     {{- range $key, $value := .sdk }}
       {{- if ne $value.default $value.need }}
       DEFAULT{{ $key -}}: "{{- $value.default }}"
       NEED{{ $key -}}: "{{- $value.need }}"
       {{- end }}
     {{- end }}
    next:
     {{- range $key, $value := .sdk }}
       {{- if ne $value.default $value.need }}
       - {{ $key }}SetVersionNeed
       {{- end }}
     {{- end }}

  - id: setDefaults
    variables:
     {{- range $key, $value := .sdk }}
       {{- if ne $value.default $value.need }}
       DEFAULT{{ $key -}}: "{{- $value.default }}"
       NEED{{ $key -}}: "{{- $value.need }}"
       {{- end }}
     {{- end }}
    next:
     {{- range $key, $value := .sdk }}
       {{- if ne $value.default $value.need }}
       - {{ $key }}SetVersionDefault
       {{- end }}
     {{- end }}

{{ range $key, $value := .sdk }}
  {{- if ne $value.default $value.need }}
  - id: {{ $key }}SetVersionNeed
    variables:
      software: "{{- $key -}}"
      version: "${NEED{{- $key -}}}"
    next:
     - setVersion

  - id: {{ $key }}SetVersionDefault
    variables:
      software: "{{- $key -}}"
      version: "${DEFAULT{{- $key -}}}"
    next:
     - setVersion
  {{- end }}
{{- end }}

# default task
  - id: info
    script:
      - |
       source "$HOME/.sdkman/bin/sdkman-init.sh"
       sdk current

  - id: setVersion
    options:
      invisible: true
      ignoreCmdError: true
    listener:
      - trigger:
          onoutContains:
            - "Stop! Candidate version is not installed"
        action:
           target: installVersion
    script:
      - |
       source "$HOME/.sdkman/bin/sdkman-init.sh"
       sdk use ${software} ${version}

  - id: installVersion
    options:
      invisible: true
    script:
      - |
       source "$HOME/.sdkman/bin/sdkman-init.sh"
       sdk install ${software} ${version}
